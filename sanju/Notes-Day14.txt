super keyword
=============
class Test{
public static void main(String[] args){
C cObj  = new C();
cObj.show();
}
}

class A{
 int aVar = 10;
 String data = "A Data";
}

class B extends A {
 int bVar = 20;
 String data = "B Data";
}

class C extends B {
 int cVar = 30;
 String data = "Instance";
 void show(){
  int local = 40;
  String data = "localVar";
  System.out.println(local);
  System.out.println(cVar);
  System.out.println(this.cVar);

  System.out.println(bVar);
  System.out.println(this.bVar);
  System.out.println(super.bVar);

  System.out.println(aVar);
  System.out.println(this.aVar);
  System.out.println(super.aVar);

  System.out.println(data);
  System.out.println(this.data);
  System.out.println(super.data);

  // System.out.println(super.super.data);
  // System.out.println(B.super.data);

  A var = super;

  A aRef = this;
  B bRef = this;
  C cRef = this;
  System.out.println(aRef.data);
  System.out.println(bRef.data);
  System.out.println(cRef.data);

  // System.out.println(aRef.bVar);
  // System.out.println(aRef.cVar);

 }
}

-------
class Test{
public static void main(String[] args){
C cObj  = new C("AMSG", "BMSG", "CMSG");
cObj.show();
cObj.data = "C NEW MSG";
cObj.setBData("B NEW MSG");
cObj.setAData("A NEW MSG");
cObj.show();
}
}

class A{
 String data = "A Data";
 A (String data) {
  this.data = data;
 }
 String getAData() {
   return data;
 }
 void setAData(String data) {
  this.data = data;
 }
}

class B extends A {
 String data = "B Data";
 B (String aData, String bData) {
  super(aData);
  this.data = bData;
 }
 String getBData() {
   return data;
 }
 void setBData(String data) {
  this.data = data;
 }
}

class C extends B {
 String data = "C Data";
 C(String aData, String bData, String cData) {
 super(aData, bData);
 this.data = cData;
 }
 void show(){
   System.out.println(data);
   System.out.println(this.data);
   System.out.println(super.data);
   System.out.println(getBData());
   System.out.println(getAData());
 }
}


Package
--------
-> A way to organize/group the classes
-> Represent directory structure in your file system.
-> You need to use package statement to define the package in java program.
-> package must be first statement in your source code.
-> only one package statement you can use in one source file
-> all classes defined the source file will be in same package.

-> When you have public class inside source file, the file name must be same as public class name.
-> In one source file, we can have only one public class and any number of non public class.

	package <packageName>
	
	package com;
	package com.oits;
	ex -> package com.oits.app;
	

Compile Classes with Package
	javac -d <destinationLocationWherePackageWillBeCreated> <sourceFileName>
	
	javac -d . Test.java
		. represents current working directory

Execute Classes with Package
	java <fullyQualifiedClassName>
	java <packageName>.<className>

	package com;
		java com.Test

	package com.oits;
		java com.oits.Test

	package com.oits.app;
		java com.oits.app.Test
		
Assume the my working directory is D:\CODE\JAVA
	javac -d . Test.java		-> Relative Path
	javac -d D:\CODE\JAVA Test.java	-> Absolue Path

	javac -d . Test.java		-> Relative Path
	javac -d D:\CODE\JAVA Test.java	-> Absolue Path

	javac -d .\classes Test.java		-> Relative Path
	javac -d D:\CODE\JAVA\classes Test.java	-> Absolue Path

	javac -d ..\ Test.java		-> Relative Path
	javac -d D:\CODE Test.java	-> Absolue Path

	javac -d ..\classes Test.java		-> Relative Path
	javac -d D:\CODE\classes Test.java	-> Absolue Path

	javac -d E:\myapp\classes Test.java	-> Absolue Path


Classpath:
-----------
-> Environment variable to represent location of package/class/jar files.
-> When you want to access classes/package from other location then you need to set class path.

Assume the my working directory is D:\CODE\JAVA
	javac -d E:\myapp\classes Test.java

	To execute:
	java com.oits.app.Test	-> Error (package is not found in current location)

Option 1(Temporarly for current Command executon):
	java -cp E:\myapp\classes com.oits.app.Test -> Run the class successfully.

Option 2(Temporarly for current Command Prompt):
	SET CLASSPATH=%CLASSPATH%;E:\myapp\classes;
		java com.oits.app.Test 	-> Run the class successfully.

Option 3(Setting CLASSPATH in Environment Variable Permanently)
	Open My Computer/ (This PC)
	Right Click on blank space and select Properties
	Click on Advanced System Properties from Left Panel
	It will open System Properties
	Under Advanced Tab Click on Environment Variable Button
	Add/Edit new Environment Variable under User Variables
		Variable Name: CLASSPATH
		Variable Value: E:\myapp\classes;.;
	Close all opened window by selecting OK.


Accessing Classes from other source file
=========================================
we have package com.p1 with the below class
	Public class Hello
	Non Public class Hai
We want to acces these classes from other class
	1) Test1.java (which is in same package com.p1)
	2) Test2.java (which is in different package com.p2)


Hello.java
------------
package com.p1;

public class Hello{
 void show(){
   System.out.println("-- show() --");   
 }
 public void display(){
   System.out.println("-- display() --");   
 }
}

class Hai{
 void welcome(){
   System.out.println("-- welcome() --");   
 }
 public void thankyou(){
   System.out.println("-- thankyou() --");   
 }
}

1) Test1.java (which is in same package com.p1)
You can access class from other class within the same package directly.

package com.p1;

public class Test1{
public static void main(String[] args) {

Hello h1 = new Hello();
h1.show();
h1.display();

Hai h2 = new Hai();
h2.welcome();
h2.thankyou();

}
}



2) 
Test2.java (which is in different package com.p2)

The class which you want to access from outside
	-> Must be public
	-> Package must be in the classpath

The class Where you want to access, you need to provide package information of the source class which you are accessing.
 a) Fully Qualified Class Name
 
Test2.java
-------------
package com.p2;

public class Test2{
public static void main(String[] args) {

com.p1.Hello h1 = new com.p1.Hello();
h1.display();
//h1.show();

com.p1.Hello h2 = new com.p1.Hello();
h2.display();
//h2.show();


// Hai h3 = new Hai();
// com.p1.Hai h4 = new com.p1.Hai();

}
}

b) import statement
-> You can have multiple import statement in the source file
-> All must be present after the package statement (if available) and before the first class/interface/ declared.

	To access one specific class
		import <packageName>.<className>;
	
	To access All public class
		import <packageName>.*;

Test.java
------------
package com.p2;
import java.util.*;
import java.io.*;

public class Test{
public static void main(String[] args) {
}
}

Test.java
------------
import java.util.*;
import java.io.*;

public class Test{
public static void main(String[] args) {
}
}

Test.java
------------
import java.util.*;

public class Test{
public static void main(String[] args) {
}
}
import java.io.*;	// Invalid
class A {}

Test3.java (which is in different package com.p2)
	
package com.p2;

import com.p1.Hello;

public class Test3{
public static void main(String[] args) {

Hello h1 = new Hello();
h1.display();
//h1.show();

Hello h2 = new Hello();
h2.display();
//h2.show();


// Hai h3 = new Hai();
// com.p1.Hai h4 = new com.p1.Hai();

}
}


----------
import java.util.*;
import java.io.*;

public class Test{
public static void main(String[] args) {

List list = null;
Collection col = null;

InputStream ins = null;
Reader rd = null;

Date dt = null;

}
}
---------------
import java.util.*;
import java.sql.*;

public class Test{
public static void main(String[] args) {

List list = null;
Collection col = null;

Driver d = null;

}
}

----
import java.util.List;
import java.util.Collection;
import java.sql.Driver;
import java.util.Date;

public class Test{
public static void main(String[] args) {

List list = null;
Collection col = null;

Driver d = null;

Date dt = null;

}
}
---
import java.util.*;
import java.sql.Driver;

public class Test{
public static void main(String[] args) {

List list = null;
Collection col = null;

Driver d = null;

Date dt = null;

}
}
--- Error ----

import java.util.*;
import java.sql.*;

public class Test{
public static void main(String[] args) {
List list = null;
Collection col = null;
Driver d = null;
Date dt = null;
}
}

---- Valid ---
import java.util.*;
import java.sql.*;
import java.util.Date;

public class Test{
public static void main(String[] args) {
List list = null;
Collection col = null;
Driver d = null;
Date dt = null;
}
}
---
import java.util.*;
import java.sql.*;

public class Test{
public static void main(String[] args) {
List list = null;
Collection col = null;
Driver d = null;
java.util.Date dt = null;
}
}

---
import java.util.*;
import java.sql.*;
import java.util.Date;

public class Test{
public static void main(String[] args) {
List list = null;
Collection col = null;
Driver d = null;
Date dt1 = null;
java.sql.Date dt2 = null;
}
}



Static import (From Java 5)
---------------------------
-> Added from java 5
-> to access public static member of the class

	import static <packageName>.<className>.<publicStaticMemberName>;
	import static <packageName>.<className>.*;


public class Test{
public static void main(String[] args) {

System.out.println(Math.sqrt(25));
System.out.println(Math.pow(2,3));
System.out.println(Math.PI);

//System.out.println(sqrt(25));
//System.out.println(pow(2,3));
//System.out.println(PI);
//out.println("Message");

}
}
----

import static java.lang.Math.sqrt;
import static java.lang.Math.pow;
import static java.lang.Math.PI;
import static java.lang.System.out;

public class Test{
public static void main(String[] args) {
out.println(sqrt(25));
out.println(pow(2,3));
out.println(PI);
out.println("Message");
}
}

------
import static java.lang.Math.*;
import static java.lang.System.*;

public class Test{
public static void main(String[] args) {
out.println(sqrt(25));
out.println(pow(2,3));
out.println(PI);
out.println("Message");
}
}
-----

import java.util.Arrays;

public class Test{
public static void main(String[] args) {
Arrays.sort(args);
}
}

---

import static java.util.Arrays.sort;

public class Test{
public static void main(String[] args) {
sort(args);
//Arrays.sort(args);
}
}

---
import java.util.List;

import static java.util.Collections.sort;

public class Test{
public static void main(String[] args) {
List list = null;
sort(list);
}
}

----
import static java.lang.Byte.MAX_VALUE;
public class Test{
public static void main(String[] args) {
System.out.println(MAX_VALUE);
}
}

--
import static java.lang.Integer.MAX_VALUE;
public class Test{
public static void main(String[] args) {
System.out.println(MAX_VALUE);
}
}
---Error --
import static java.lang.Integer.MAX_VALUE;
import static java.lang.Byte.MAX_VALUE;
public class Test{
public static void main(String[] args) {
System.out.println(MAX_VALUE);
}
}
---Error --
import static java.lang.Integer.*;
import static java.lang.Byte.*;
public class Test{
public static void main(String[] args) {
System.out.println(MAX_VALUE);
}
}
-- VALID --
public class Test{
public static void main(String[] args) {
System.out.println(Byte.MAX_VALUE);
System.out.println(Integer.MAX_VALUE);
}
}


Access Modifier
---------------
-> Specify the scope/visibility/accessibility of member
-> 4 Access Scope but 3 access modifiers
	Private Scope		private
		Access only from within the class
     	Default/Package Scope	
		Access only from same package
	Protected Scope		protected
		Access from same package
		Access from outside package as subclass member
			-> within subclass or with current subclass object
			-> As Inherited member in the sub class
		Can not be accessed from outside package from non sub class
	Public Scope		public
		Access from any where
	
Hello.java
-----------
package com.p1;

public class Hello {
private String a = "private";
String b = "default";
proected String c = "protected";
public String d = "public";

void show(){
 System.out.println("-- directly - from current object --");
 System.out.println(a);
 System.out.println(b);
 System.out.println(c);
 System.out.println(d);

 System.out.println("-- using this keyword - from current object --");
 System.out.println(this.a);
 System.out.println(this.b);
 System.out.println(this.c);
 System.out.println(this.d);

 Hello h = new Hello();
 System.out.println("-- using different object --");
 System.out.println(h.a);
 System.out.println(h.b);
 System.out.println(h.c);
 System.out.println(h.d);
}
}


Hai.java
----------
package com.p1;
public class Hai extends Hello{ }

Sub Class in same package

Welcome.java
----------
package com.p1;

public class Welcome extends Hello {
void display(){
 System.out.println("-- directly - from current object --");
 System.out.println(a);
 System.out.println(b);
 System.out.println(c);
 System.out.println(d);

 System.out.println("-- using this keyword - from current object --");
 System.out.println(this.a);
 System.out.println(this.b);
 System.out.println(this.c);
 System.out.println(this.d);

 System.out.println("-- using super keyword - from current object --");
 System.out.println(super.a);
 System.out.println(super.b);
 System.out.println(super.c);
 System.out.println(super.d);

 Hello h = new Hello();
 System.out.println("-- using super class object --");
 System.out.println(h.a);
 System.out.println(h.b);
 System.out.println(h.c);
 System.out.println(h.d);

 Welcome w = new Welcome();
 System.out.println("-- using current class different object --");
 System.out.println(w.a);
 System.out.println(w.b);
 System.out.println(w.c);
 System.out.println(w.d);

 Hai h1 = new Hai();
 System.out.println("-- using other subclass object --");
 System.out.println(h1.a);
 System.out.println(h1.b);
 System.out.println(h1.c);
 System.out.println(h1.d);
}
}

Non Sub class in the same package
----------------------------------
package com.p1;

public class Test1{
public static void main(String args[]){
Hello h = new Hello();
System.out.println(h.a);
System.out.println(h.b);
System.out.println(h.c);
System.out.println(h.d);

}
}


Sub Class in other package

Abc.java
--------
package com.p2;

public class Abc extends Hello{}

Xyz.java
--------
package com.p2;

public class Xyz extends Hello{
....
}


Non Sub Class in other package
Test2.java
---------------
package com.p2;

public class Test2 {
public static void main(String args[]){

....
}

}

SameclassDirectly
SameclassUsingThis
SameclassUsingOtherObject

In Same Packahe
	Non Sub class

	SubclassDirectly
	SubclassUsingThis
	SubclassUsingSuper
	SubclassUsingSuperObject
	SubclassUsingOtherSubClassObject
	SubclassUsingOtherObjectOfCurrentClass

In Other Packahe
	Non Sub class

	SubclassDirectly
	SubclassUsingThis
	SubclassUsingSuper
	SubclassUsingSuperObject
	SubclassUsingOtherSubClassObject
	SubclassUsingOtherObjectOfCurrentClass

private
default
protected
public

