this keyword:
=============
this is a keyword.
it acts like reference variable.
it acts like final reference variable.
It always refer the current object.
Since it refers the current object, you can only use this from instance context, not from static context.

class Test{
public static void main(String[] args){
Student s1 = new Student (35,"Aadi");
s1.show();
}
}
class Student {
int age;
String name;
Student(int age1, String name1){
System.out.println("Student() "+age1+"\t"+name1);
age = age1;
name = name1;
System.out.println("Student() "+age+"\t"+name);
}
void show(){
System.out.println("Age "+age+", Name "+name);
}
}


---- Without this keyword ----

class Test{
public static void main(String[] args){
Student s1 = new Student (35,"Aadi");
System.out.println("s1 "+s1);
s1.show();

Student s2 = new Student (45,"Manoj");
System.out.println("s2 "+s2);
s2.show();

}
}
class Student {
int age;
String name;

Student(int age, String name){
System.out.println("\nStudent() "+age+"\t"+name);
age = age; 
name = name;
System.out.println("Student() "+age+"\t"+name);
}

void show(){
System.out.println("Age "+age+", Name "+name);
}

}

---- With this keyword ----



class Test{
public static void main(String[] args){
Student s1 = new Student (35,"Aadi");
System.out.println("s1 "+s1);
s1.show();

Student s2 = new Student (45,"Manoj");
System.out.println("s2 "+s2);
s2.show();

}
}
class Student {
int age;
String name;

Student(int age, String name){
System.out.println("\nStudent() "+age+"\t"+name+" this "+ this);
this.age = age; // objectAge = localVarAge;
this.name = name;// objectName = localVarName;
System.out.println("Student() "+age+"\t"+name+" this "+ this);
}

void show(){
System.out.println("Age "+age+", Name "+name +"\t"+this);
}

}

this can be used for the below purpose
1) To refer variable of current class
	this.age
	this.name

2) To refer the method of current class
	this.show()
	this.display()

3) To refer the overloaded constructor
-> it must be the first statement inside another constructor
	this(35,"Aadi")
	this(35)


class Test{
public static void main(String[] args){
Student s1 = new Student ();
s1.setDetails(35,"Aadi");
s1.showDetails();

Student s2 = new Student ();
s2.setDetails(45,"Manoj");
s2.showDetails();

}
}
class Student {
int age;
String name;

void setDetails(int age, String name){
System.out.println("\nAge "+age+",Name "+name);
System.out.println("this.age "+this.age+",this.name "+name);
this.age = age;	// Refer Variables
this.name = name;
System.out.println("Age "+age+",Name "+name);
this.showDetails();	// Methods
}

void showDetails(){
System.out.println("this.age "+this.age+",this.name "+name);
}

}



class Test{
public static void main(String[] args){
Student s1 = new Student(23);
s1.showDetails();
Student s2 = new Student("Aadi");
s2.showDetails();

Student s3 = new Student(35,"Rahul");
s3.showDetails();
Student s4 = new Student("Manish", 45);
s4.showDetails();


}
}
class Student {
int age;
String name;

Student(int age){
System.out.println("\n-- Student(int) --");
 this.age = age;
}

Student(String name){
 System.out.println("\n-- Student(String) --");
 this.name = name;
}

Student(int age, String name){
 // Student(age); // trying to call Student(int) constructor but gives error
 this(age); // calling Student(int) constructor
 System.out.println("-- Student(int, String) --");
 // this(name); // trying to call one more constructor of same class
 this.name = name;
}

Student(String name, int age){
 this(name);
 System.out.println("-- Student(String, int) --");
 this.age = age;
}


void showDetails(){
System.out.println("this.age "+this.age+",this.name "+name);
}

}


final with Referenec
----------------------
class Test{
public static void main(String[] args){
Student s1 = new Student(35,"Aadi");
s1.showDetails();
// s1.age = 12;
s1.name = "Manish";
s1.showDetails();
s1 = new Student(67,"Rey");
s1.showDetails();

final Student s2 = new Student(45,"Rahul");
s2.showDetails();
// s2.age = 89;
s2.name = "Manoj";
s2.showDetails();
// s2 = new Student(68,"A");

}
}
class Student {
final int age;
String name;


Student(int age, String name){
 this.age = age;
 this.name = name;
// this = null;
}

void showDetails(){
System.out.println("Age "+this.age+",Name "+name);
}
}

You can define the local variable with the same name as class level veriable.
-> If you refer any variable the first jvm/compiler will check in local scope for local variable.	

-> When the local variabe is found then that will be used.

-> When the local variabe is not found then it will look for the class variable.


class Test{
public static void main(String[] args){
Hello h1 = new Hello(90, 80);
h1.show();

Hello h2 = new Hello(67, 56);
h2.show();

}
}
class Hello {
int ab;
static int bc;
int mn;

Hello(int ab, int bc, int mn){
this.ab = ab;
this.bc = bc;
this.mn = mn;
}
void show(){
String ab = "local";
float bc = 123.45F;
System.out.println(ab);
System.out.println(bc);
System.out.println(this.ab);
System.out.println(this.bc);
System.out.println(Hello.bc);
System.out.println(mn);
System.out.println(this.mn);
}
}



Method
-------