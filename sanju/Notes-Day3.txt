	Java
	Setup system to work with Java
		Installing
		Setting Path
		Writing Code
		Compiling
		Executing
	
	Java Basic Concept
		Character Set
			Alphabets	A - Z 
					a - z
			Digits		0 - 9
			Special Char	+ - * / & | $ _ ^ ! etc

		Keywords / Reserved Words
		Words but reserved by language vendor.
		Blocked with special meaning that can not be modified.
		For Java Program, the meaning words will remain same.
		All these reserved words are in lower case.
		Java is Case Sensitive Language.
			JDK 1.4	(Java 2)  49 Keywords
			JDK 1.5 (Java 5)  50 keywords (enum)
			Java 6
			Java 7
			Java 8
		const & goto keywords does not have any meaning.		
		null, true, false are LITERALS have meaning but these are not keywords.


		

class		Class & Object
public		Access Modifier
static		Modifier
void		Return Type
boolean	
int
long
float
	Data Type (8)	
	Class & Object (9)
	Access Modifier	(3)
	Modifiers (9)
	Package	(2)
	Control Statement (12)
	Exception Handling (6)
	Only Return Type (1)

Identifier / User Define Words
------------------------------
Words/Names used to identify 
	Class
	Interface
	Methods
	Variable
	Constant
	Enumm
	Annoations
	etc

	Rules
	------
		Alphabets , Digits, Special Symbol ($ _ )
		Can not starts with Digits.
		Keywords can not be used as user defined words.

	Class, Interface, Enum, Annotation
		Start with Uppper case
		Use Camel Case Character in case of multiple Words
		Represents Group
			Day
			Student
			Employee
			EmployeeAccount

	variable
		Single word -> all char in lower case
			email
			phone
			address

		Multiple word -> 
			For first word all char in lower case
			Second words onwards follow came case

			employeeEmail
			studentPhone
			visitorAddress
			employeeHomeAddress

	method -> action
		Start with verbs to represent action
		Single word -> all char in lower case
			save
			get
			delete

		Multiple word -> 
		For first word all char in lower case
		Second words onwards follow came case
			saveEmployeeDetails
			deleteEmploeePhone
	constant
		character must be in Upper case
		Multiple word -> Separate with UNDERSCORE (_)	
		
			TAX
			TAX_AMOUNT
			BASIC
			BASIC_SALARY
		
				
	
Data Type :
----------
	It represents the type of your data.
	Memory required for your data.

1) Primitive / Basic 
2) Reference / User Defined

Basic Data Type (Primitive Type) - 8 keywords
--------------------------------
	boolean		char		int	long
	float		double		short	byte
		
Reference / User Defined
	Names but not keywords
	
	Any Class, Interface, Enum, Annotation name are Reference data type.	
		
	Test
	String
	System
	
	

Variable:
-----------
Name of the memory which holds data during execution

Primitive Variable
	Variable defined with primitive type
		int a;
Reference Variable
	Variable defined with reference type
		String name;

class Test{
static boolean a;
static byte b;
static short c;
static int d;
static long e;
static float f;
static double g;
static char h;
static String s;

public static void main(String args[]){
System.out.println(a);
System.out.println(b);
System.out.println(c);
System.out.println(d);
System.out.println(e);
System.out.println(f);
System.out.println(g);
System.out.println(s);
System.out.println(h);
System.out.println(h == 0);
}
}


class Test{
public static void main(String args[]){
 int x; x = 18; 
 System.out.println(x); 
 int a = 19; 
 System.out.println(a);
 int b, c, d; 
 b = c = d = 12; 
 System.out.println(b); 
 System.out.println(c);
 System.out.println(d); 
 int m = 23, n = 45, p = 56; 
 System.out.println(m);
 System.out.println(n); 
 System.out.println(p); 
 String s1 = "ABC", s2 = "XYZ", s3 = "MNO";
 System.out.println(s1); 
 System.out.println(s2); 
 System.out.println(s3);
 s1 = "DEF"; 
 System.out.println(s1);
}
}

Constant:
----------
  Special variable that value can not be modified once assigned.
  It is called as final variable.
     final <dataType> <varName> = <value>;
	
/* 
 This is Example of Constant
 Also showing the comment.
*/
class Test{
public static void main(String args[]){
 final int X ;
 X = 10;
 System.out.println(X);
 // X = 20;
 System.out.println(X);
 
 final int TOTAL = 234;
 System.out.println(TOTAL);
 // TOTAL = 1234;
 // const int MN = 23;
}
}


Literals
---------
 Actual value used to 
	store in the variable / constant
	using for calculation

	int x = 12;
	String name = "AADI";
	
	int, String	Data Type
	x, name		Variable Name
	=		Operator
	12, AADI	Actual Value (Literals)

Boolean Literals
----------------
	used for boolean variable
	Only possible values are true & false.

class Test{
public static void main(String args[]){
 boolean b1 = true;
 boolean b2 = false;
 
 System.out.println(b1);
 System.out.println(b2);

 // boolean b3 = True;
 // boolean b4 = 0;

}
}


Character Lierals
-----------------
 	used for char variable
	Only one character within single quotes.
	

class Test{
public static void main(String args[]){
char ch1 = 'A';
char ch2 = 'a';
char ch3 = '9';
char ch4 = '+';

System.out.println(ch1);
System.out.println(ch2);
System.out.println(ch3);
System.out.println(ch4);

// char ch5 = 'AB';

}
}


class Test{
public static void main(String args[]){
char ch1 = '\';
System.out.println(ch1);
char ch2 = '\\';
System.out.println(ch2);

/* Escape Character
 \t	TAB
 \b	BACK SPACE
 \\	Slash
 \'	Single Quotes
 \"	Double Quotes
 etc
*/
// char ch3 = '\A';
}
}

// ASCII Value
class Test{
public static void main(String args[]){
char ch1 = 65;
char ch2 = 97;
char ch3 = 49;
char ch4 = 32;

System.out.println(ch1);
System.out.println(ch2);
System.out.println(ch3);
System.out.println(ch4);
System.out.println(ch4 == ' ');

/*
A 65
B 66
..
Z 90

a 97
b 98
..
z 122

0 48
1 49
..
9 57


SPACE 32

*/

}
}



String
Integral
Floating
null 
		
  

















		
